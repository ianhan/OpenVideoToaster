head	2.55;
access;
symbols;
locks; strict;
comment	@*@;


2.55
date	96.11.18.18.44.10;	author Holt;	state Exp;
branches;
next	2.54;

2.54
date	96.07.29.10.40.54;	author Holt;	state Exp;
branches;
next	2.53;

2.53
date	95.10.02.15.04.59;	author Flick;	state Exp;
branches;
next	2.52;

2.52
date	95.09.28.10.20.30;	author Flick;	state Exp;
branches;
next	2.51;

2.51
date	95.09.25.12.03.34;	author Flick;	state Exp;
branches;
next	2.50;

2.50
date	95.09.19.12.46.53;	author Flick;	state Exp;
branches;
next	2.49;

2.49
date	95.09.13.12.01.49;	author Flick;	state Exp;
branches;
next	2.48;

2.48
date	95.08.16.10.44.36;	author Flick;	state Exp;
branches;
next	2.47;

2.47
date	95.07.27.18.09.28;	author Flick;	state Exp;
branches;
next	2.46;

2.46
date	95.06.20.23.43.16;	author Flick;	state Exp;
branches;
next	2.45;

2.45
date	95.04.25.15.06.21;	author Flick;	state Exp;
branches;
next	2.44;

2.44
date	95.03.07.16.13.12;	author CACHELIN4000;	state Exp;
branches;
next	2.43;

2.43
date	95.02.27.13.39.41;	author CACHELIN4000;	state Exp;
branches;
next	2.42;

2.42
date	95.02.24.11.11.38;	author CACHELIN4000;	state Exp;
branches;
next	2.41;

2.41
date	95.02.19.16.40.09;	author CACHELIN4000;	state Exp;
branches;
next	2.40;

2.40
date	95.02.19.01.43.46;	author CACHELIN4000;	state Exp;
branches;
next	2.39;

2.39
date	95.02.11.17.02.05;	author CACHELIN4000;	state Exp;
branches;
next	2.38;

2.38
date	95.02.01.17.56.11;	author CACHELIN4000;	state Exp;
branches;
next	2.37;

2.37
date	95.01.25.18.36.57;	author CACHELIN4000;	state Exp;
branches;
next	2.36;

2.36
date	95.01.24.16.39.54;	author CACHELIN4000;	state Exp;
branches;
next	2.35;

2.35
date	95.01.24.11.21.30;	author CACHELIN4000;	state Exp;
branches;
next	2.34;

2.34
date	95.01.13.12.59.00;	author CACHELIN4000;	state Exp;
branches;
next	2.33;

2.33
date	94.12.24.12.42.46;	author CACHELIN4000;	state Exp;
branches;
next	2.32;

2.32
date	94.12.04.22.14.24;	author CACHELIN4000;	state Exp;
branches;
next	2.31;

2.31
date	94.12.03.18.34.07;	author CACHELIN4000;	state Exp;
branches;
next	2.30;

2.30
date	94.12.03.14.50.28;	author CACHELIN4000;	state Exp;
branches;
next	2.29;

2.29
date	94.12.03.13.42.26;	author CACHELIN4000;	state Exp;
branches;
next	2.28;

2.28
date	94.12.03.13.40.14;	author CACHELIN4000;	state Exp;
branches;
next	2.27;

2.27
date	94.11.30.23.25.17;	author CACHELIN4000;	state Exp;
branches;
next	2.26;

2.26
date	94.11.04.16.50.35;	author CACHELIN4000;	state Exp;
branches;
next	2.25;

2.25
date	94.10.27.23.14.51;	author CACHELIN4000;	state Exp;
branches;
next	2.24;

2.24
date	94.10.25.08.10.57;	author Kell;	state Exp;
branches;
next	2.23;

2.23
date	94.10.11.21.41.21;	author CACHELIN4000;	state Exp;
branches;
next	2.22;

2.22
date	94.10.10.17.18.57;	author CACHELIN4000;	state Exp;
branches;
next	2.21;

2.21
date	94.10.05.00.56.46;	author CACHELIN4000;	state Exp;
branches;
next	2.20;

2.20
date	94.09.27.17.18.19;	author CACHELIN4000;	state Exp;
branches;
next	2.19;

2.19
date	94.09.24.15.13.00;	author CACHELIN4000;	state Exp;
branches;
next	2.18;

2.18
date	94.09.22.17.49.58;	author CACHELIN4000;	state Exp;
branches;
next	2.17;

2.17
date	94.09.20.23.40.59;	author CACHELIN4000;	state Exp;
branches;
next	2.16;

2.16
date	94.09.13.20.20.12;	author CACHELIN4000;	state Exp;
branches;
next	2.15;

2.15
date	94.09.12.13.01.29;	author CACHELIN4000;	state Exp;
branches;
next	2.14;

2.14
date	94.09.09.20.21.40;	author CACHELIN4000;	state Exp;
branches;
next	2.13;

2.13
date	94.09.09.15.33.51;	author Kell;	state Exp;
branches;
next	2.12;

2.12
date	94.09.07.11.02.28;	author CACHELIN4000;	state Exp;
branches;
next	2.11;

2.11
date	94.09.05.20.25.08;	author Kell;	state Exp;
branches;
next	2.10;

2.10
date	94.09.05.20.16.46;	author Kell;	state Exp;
branches;
next	2.9;

2.9
date	94.09.05.18.01.51;	author Kell;	state Exp;
branches;
next	2.8;

2.8
date	94.09.05.18.00.51;	author Kell;	state Exp;
branches;
next	2.7;

2.7
date	94.09.02.08.26.04;	author Kell;	state Exp;
branches;
next	2.6;

2.6
date	94.08.31.18.10.49;	author CACHELIN4000;	state Exp;
branches;
next	2.5;

2.5
date	94.08.30.17.22.36;	author CACHELIN4000;	state Exp;
branches;
next	2.4;

2.4
date	94.07.14.15.08.15;	author CACHELIN4000;	state Exp;
branches;
next	2.3;

2.3
date	94.07.04.18.41.45;	author CACHELIN4000;	state Exp;
branches;
next	2.2;

2.2
date	94.06.22.10.44.47;	author CACHELIN4000;	state Exp;
branches;
next	2.1;

2.1
date	94.06.07.10.18.02;	author CACHELIN4000;	state Exp;
branches;
next	2.0;

2.0
date	94.04.20.17.35.10;	author CACHELIN4000;	state Exp;
branches;
next	;


desc
@RCS Controlled file
@


2.55
log
@added more audio envelope support.
@
text
@/* $Panel.h$ - Stuff for Routines for Control Panels
* $Id: panel.h,v 2.54 1996/07/29 10:40:54 Holt Exp Holt $
* $Log: panel.h,v $
*Revision 2.54  1996/07/29  10:40:54  Holt
*added part of new audioenv panel.
*
*Revision 2.53  1995/10/02  15:04:59  Flick
*Added PLID_DESTPOPUP, new define FLY_VOL_MAX for *usable* Flyer volume name size
*
*Revision 2.52  1995/09/28  10:20:30  Flick
*Removed messy RAW_ key defines, now uses RawKeyCodes.h for std Amiga mappings
*
*Revision 2.51  1995/09/25  12:03:34  Flick
*Added some new PL_ flags, the long-needed HALF1 positioning (few support this yet) plus a new
*PLID system to pick out specific PLines within the panel (better than using PL_ flags!)
*
*Revision 2.50  1995/09/19  12:46:53  Flick
*New GB_ stuff for GenButtons, new Panel initializer structure
*
*Revision 2.49  1995/09/13  12:01:49  Flick
*Added stuff for fine control over PLine placement, structures for segmented
*audio meters and CutClipDisplay, other beautification
*
*Revision 2.48  1995/08/16  10:44:36  Flick
*New PL_xxx defines for shadow/phantom functions
*Added a partial RAWKEY_xxx list
*
*Revision 2.47  1995/07/27  18:09:28  Flick
*Added PL_GENBUTT so I can add some freaking buttons
*
*Revision 2.46  1995/06/20  23:43:16  Flick
*PL_ flags are now all in "1<<x" notation.  Protected them with ()'s  !!!
*
*Revision 2.45  1995/04/25  15:06:21  Flick
*Added ClipxLit flags in AudIndicator struct
*
*Revision 2.44  1995/03/07  16:13:12  CACHELIN4000
*New FASTDRIVE compression mode support, fastdrive bit in config
*
*Revision 2.43  1995/02/27  13:39:41  CACHELIN4000
*Add AudIndicatro struct to replace BarGraph, which fell out of favor.
*
*Revision 2.42  1995/02/24  11:11:38  CACHELIN4000
*Add TagMess structure
*
*Revision 2.41  1995/02/19  16:40:09  CACHELIN4000
**** empty log message ***
*
*Revision 2.40  1995/02/19  01:43:46  CACHELIN4000
**** empty log message ***
*
*Revision 2.39  1995/02/11  17:02:05  CACHELIN4000
*add PNL_NUMSLIDER type, notes on STRING width
*
*Revision 2.38  1995/02/01  17:56:11  CACHELIN4000
*add some defines, etc.
*
*Revision 2.37  1995/01/25  18:36:57  CACHELIN4000
*Add PNL_STEPSLIDER type
*
*Revision 2.36  1995/01/24  16:39:54  CACHELIN4000
*Add Comment, icon to NewClip struct, etc.
*
*Revision 2.35  1995/01/24  11:21:30  CACHELIN4000
**** empty log message ***
*
*Revision 2.34  1995/01/13  12:59:00  CACHELIN4000
*Add partner stuff to PanelLine struct,  PL_PARTNER and misc. flags
*
*Revision 2.33  1994/12/24  12:42:46  CACHELIN4000
*Note use of PropEnd for strings
*
*Revision 2.32  1994/12/04  22:14:24  CACHELIN4000
**** empty log message ***
*
*Revision 2.31  1994/12/03  18:34:07  CACHELIN4000
**** empty log message ***
*
*Revision 2.30  1994/12/03  14:50:28  CACHELIN4000
**** empty log message ***
*
*Revision 2.29  1994/12/03  13:42:26  CACHELIN4000
*duoooh!!
*
*Revision 2.28  1994/12/03  13:40:14  CACHELIN4000
*Add define for TUNE_QUICK, and PNL_CHECK panel type
*
*Revision 2.27  1994/11/30  23:25:17  CACHELIN4000
*add PL_SMREF flag
*
*Revision 2.26  1994/11/04  16:50:35  CACHELIN4000
*add PL_PLAY flag
*
*Revision 2.25  94/10/27  23:14:51  CACHELIN4000
*Fix notes on UserFun, add Window to PanelLine struct.
*
*Revision 2.24  94/10/25  08:10:57  Kell
*Added new flags to the RenderCallBack structure for Video FineTune.
*
*Revision 2.23  1994/10/11  21:41:21  CACHELIN4000
*PNL_DUOSLIDE, UserFun, etc.
*
*Revision 2.22  94/10/10  17:18:57  CACHELIN4000
*Add UserFunc(), UserObj to PanelLine structure...
*
*Revision 2.21  94/10/05  00:56:46  CACHELIN4000
*Add PNL_Button type, f'n in EZNUM
*
*Revision 2.20  94/09/27  17:18:19  CACHELIN4000
*Add f'n call to POPUP line Param2
*
*Revision 2.19  94/09/24  15:13:00  CACHELIN4000
**** empty log message ***
*
*Revision 2.18  94/09/22  17:49:58  CACHELIN4000
*Comment EZSlider changes
*
*Revision 2.17  94/09/20  23:40:59  CACHELIN4000
*Add PNL_SKIP type
*
*Revision 2.16  94/09/13  20:20:12  CACHELIN4000
*Move PNL_CROUTON FG to Param2, Audio bit defs, RCB struct change
*
*
*Revision 2.13  94/09/09  15:33:51  Kell
*Bit 30 of flags indicates if in FF/REW or Shuttle mode.
*
*Revision 2.12  1994/09/07  11:02:28  CACHELIN4000
*add some PNL_types for Flyer, etc.
*
*Revision 2.10  1994/09/05  20:16:46  Kell
*Added more fields to define Shuttle Speed.
*
*Revision 2.9  1994/09/05  18:01:51  Kell
*Added shuttle speed/direction information to the RenderCallBack struct.
*
*Revision 2.7  1994/09/02  08:26:04  Kell
*Put MouseX/Y fields into the RenderCallBack structure.
*
*Revision 2.5  94/08/30  17:22:36  CACHELIN4000
*Add PL_Flags, definitions
*
*Revision 2.0  94/04/20  17:35:10  CACHELIN4000
*FirstCheckIn
*
*
* Copyright (c)1992 NewTek, Inc.
* Confidental and Proprietary. All rights reserved.
*
*********************************************************************/

#define REG(x) register __##x
#define MAX(a,b) ((b>a) ? b:a)
#define MIN(a,b) ((b<a) ? b:a)
#define BOUND(x,l,u) MIN(MAX(x,l),u)
#define EVEN(x)  (x&0xFFFFFFFE)
#define DISABLE(g)	g->Flags |= GFLG_DISABLED
#define ENABLE(g)		g->Flags &= (~GFLG_DISABLED)
#define SELECT(g)		g->Flags |= GFLG_SELECTED
#define DESELECT(g)	g->Flags &= (~GFLG_SELECTED)
#define IEQUALIFIER_SHIFT (IEQUALIFIER_LSHIFT|IEQUALIFIER_RSHIFT)

#define Frms2Flds(x)			((x) << 1)
#define Flds2Frms(x)			((x) >> 1)
#define Fly4Flds2Frms(x)	(((x) >> 2) << 1)

#define FRAME_QUANT	2
#define STILL_QUANT 2
#define MIN_FIELD	0

//#define TEMP_CLIP_NAME "_._|~~x~~temp~~x~~|_._"
#define TEMP_CLIP_NAME "LastClipMade...Uncut"

#define COMMENT_MAX 80
#define STRING_ID 1002	// Magic Number
#define MAX_STRING_BUFFER	300
#define CLIP_NAME_MAX	42
#define CLIP_PATH_MAX	120
#define FLY_VOL_MAX		20
#define TEXT_BASE 9
#define LINE_HEIGHT (TEXT_HEIGHT+4)
#define LSP 12
#define PNL_WIDTH 264 // 238
#define PNL_X1 10
#define PNL_Y1 0
#define PNL_DIV 4
#define PNL_YADD 12
#define PTEXT_H 23
#define PTEXTLINE_H 30
#define PSLIDE_H PTEXT_H+16
#define PTEXT_YOFF 6
#define PTIME_W 181
#define PTIME_H 62
#define PTIME_POFF 32
#define PTIME_YOFF 15
#define PTIME_XOFF 80
#define PIN_H 40
#define PIN_YOFF 10
#define PCHOICE_H 54
#define PCHOICE_TOFF 6
#define PCHOICE_YOFF 24
#define MAX_PANEL_STR 32
#define PNL_MAX	20
#define PEZSLIDE_W	34
#define PTCSTRING_W 96
#define PLENSTRING_W 54
//#define PPOPUP_W 160
#define PPOPUP_W 140
#define PNUMSTRING_W 64
#define PANEL_TOP 44
#define PANEL_LENGTHX ((PNL_WIDTH<<1) - PNL_X1 - 92)

// Bits used by PLine->Flags value
#define PL_IN			(1<<0)
#define PL_OUT			(1<<1)
#define PL_DEL			(1<<2)
#define PL_LEN			(1<<3)
#define PL_AVAIL		(1<<4)
#define PL_FLYER		(1<<5)
#define PL_AUD1		(1<<6)
#define PL_AUD2		(1<<7)
#define PL_AUDIO		(PL_AUD1|PL_AUD2)
#define PL_CFRAME		(1<<8)	// Tells numbers to round(down) to even frame
#define PL_GENBUTT	(1<<9)	// General button, has a sub-ID
#define PL_DUAL		(1<<10)
#define PL_PLAY		(1<<11)
#define PL_SMREF		(1<<12)	// Smart Refresh window for requesters over panel
#define PL_PARTNER	(1<<13)	// Has a partner
#define PL_SHADOW		(1<<14)	// In and Out maintain relative separation
#define PL_SILENT		(1<<15)	// This line is a partner tag-along, dont send switcher
#define PL_PHANTOM	(1<<16)	// Hidden partner relationship
#define PL_FRAC32		(1<<17)	// 32-bit fractional value proportional to max
#define PL_ACTIVATE	(1<<18)	// Marks (string) gadget to activate on panel open
#define PL_HIDDEN		(1<<19)	// Not visible (at least until later)
#define PL_ENVELOPE	(1<<20)	// An Envelope Time or Value Gadget.




// CreateContCancel Tune bits for FineTune/QuickTune button
#define	TUNE_NONE			0
#define	TUNE_FINE			1
#define	TUNE_QUICK		2
#define	TUNE_PROC			4

// Bits used by TAG_AudioOn value
#define AUD_CH1_EXISTS		1
#define AUD_CH2_EXISTS		2
#define AUD_CH1_ENABLE		4
#define AUD_CH2_ENABLE		8
#define AUD_EXISTS			(AUD_CH1_EXISTS|AUD_CH2_EXISTS)
#define AUD_ENABLE			(AUD_CH1_ENABLE|AUD_CH2_ENABLE)
#define AUD_ENVELOPE			16


#define EZ_DELAY  3

enum {
	PNL_TEXT=1,				// Label is text, HeightAdj is user height if label==NULL, skip if label=""
	PNL_TIME,				// Param2=FXSpeed PLine to set to V
	PNL_IN_TYPE, PNL_OUT_TYPE,
	PNL_CHOICE4, PNL_CHOICE5,
	PNL_DIFF,				// DIFF is (*(Param) - *(Param2)) as a time field, PropEnd holds val, 
								// UserObj=1 for custom positioning via X,Y WORDs in Propstart
								// PropStart has position,G5 holds diff add-on, label should have space(s) on end
	PNL_TOGGLE,				// Param is bit mask, Param2, array of labels, PropEnd=#of toggles <=8
	PNL_FXSPEED,			// *Param is value, Param2 is array of 4(ULONG) field counts: S,M,F,V for FXTIME
								// PropStart=0(for FXTime update) or address of a PNL_TIME to update
	PNL_FXTIME,				// Like a DIFF, but attached to an FXSPEED
	PNL_STRING,				// String gadget Param=str ptr, PropEnd=max len, g5=optional gad width
	PNL_NUMBER,				// int gadget *Param=int , Propstart=min, propend=max
	PNL_POPUP,				// Param=names[], propstart=item, propend=max entries (NUM_VIEW)
								// UserFun = void __asm PopFunc(REG(a0) struct PanelLine *);
	PNL_CROUTON,			// good old 80x50 image.. param2=FG, param=comment, propend=commentbuf size
	PNL_SUBPANEL,			// param=f'n
	PNL_SLIDER,				// param=val, Propstart=min, propend=max
	PNL_DIVIDE,				// Just a line...
	PNL_VCR,					// VCR Controls w/ counter param=param2=counterval,
								// if param=NULL -> NO String gadget, just param2
	PNL_PLAY,				// Stop/Play buttons for FX, etc. Param is a time (LONG) to display
	PNL_EZTIME,				// Mini-Slider time gad. HH:MM:SS:FF SMPTE, Param2=FXSpeed PLine to set to V
	PNL_EZLEN,				// Mini-Slider time gad. Length in SS:FF
	PNL_EZNUM,				// Mini-Slider integer gad. UserFun=f'n
	PNL_FLYTIME,			// just like PNL_TIME, but Flyer-ready, G2 = Flyer frame offset
	PNL_EZSLIDER,			// Balance slider with centering button, param=overall volume
								//  param2 is end labels array,
	PNL_FLYSLIDER,			// Plain slider with flyer controls, G2 = Flyer frame offset
	PNL_SKIP,				// A way of ignoring irrelevant lines without chnaging param
	PNL_BUTTON,				// A Labeled button, calls UserFun()
	PNL_DUOSLIDE,			// Dual slider with in(*Param) and out(*Param2) values, G2=Flyer frame offset,
								// G1 is fake prop, G4 out string, G5, out prop(detached)
	PNL_CHECK,				// A single toggle button, Param=1/0, supports a long description
	PNL_STEPSLIDE,			// Slider with single-step buttons, optional
								// centering button (Param2!=NULL), which goes to *Param2
	PNL_NUMSLIDER			// Plain slider with number gadget...
};

enum {
	PPOS_JUST=0,		// Unused
	PPOS_LEFT,
	PPOS_CENTER,
	PPOS_RIGHT
};
#define	PPOS_JUSTMASK	0x03		/* Mask for justification code */
// Other flags in this field...
#define	PPOS_HALF1		0x20		/* Place in left half of wide panel */
#define	PPOS_HALF2		0x40		/* Place in right half of wide panel */
#define	PPOS_WIDER		0x80		/* Place in left, next one in right half of wide panel */

enum {
	PAN_CANCEL,
	PAN_CONTINUE,
	PAN_EXPERT,
	PAN_EASY,
	PAN_PROCESS,
	PAN_CUTUP,
	PAN_LOOP,
	PAN_RECORD,
	PAN_ENVL,
}; // Panel() return values

typedef BOOL (*PanHandler)(struct EditWindow *, struct FastGadget *);

//*******************************************************************
struct InitPanelLine {
	UBYTE	Type;
	UBYTE	Align;
	char	*Label;
	WORD	XAdj;
	WORD	HeightAdj;
};

struct PanelLine {
	UBYTE	Type;
	UBYTE	Align;
	char	*Label;
	WORD	XAdj;
	WORD	HeightAdj;
	LONG	*Param,*Param2;
	LONG	PropStart,PropEnd;
	WORD	(*Create)(UWORD,UWORD,struct PanelLine *,struct Gadget **);
	WORD	(*Draw)(UWORD,UWORD,struct PanelLine *,struct Window *);
	BOOL	(*Handle)(struct PanelLine *,struct  IntuiMessage *,struct Window *);
	void	(*Destroy)(struct PanelLine *);
	ULONG	__asm (*UserFun)(REG(a0)struct PanelLine *,REG(a1)struct IntuiMessage *,REG(a2)APTR Obj);
	APTR	UserObj;
	ULONG	Flags;  // determines which lines respond to hotkeys, send flyer commands
	struct Gadget *StrGadg,*PropGadg,*IncGadg,*DecGadg;
	struct Gadget *G1,*G2,*G3,*G4,*G5;
	struct Window	*Win;
	UWORD		NumParts;		// Number or 'partner' PanelLines in Partners array
	struct PanelLine *Partners; // Array of associated PanelLines
	ULONG		*Relation; // Array of flags to describe type of relationship with that partner
	ULONG	ShadowOffset;		// Used with PL_SHADOW
	UWORD	PLID;					// ID for specific line in a panel
};

#define PR_MIRROR		1      // Partner moves with, has same value as pline
#define PR_SHADOW		1<<1   // Partner moves other value by same amount as pline

enum {
	PLID_DROPIND=1,				// Dropped fields indicator
	PLID_DESTPOPUP,			// Destination drive
	PLID_USEAUDENV,
};

//*******************************************************************
// RenderCallBack->Flags bit definitions
#define DHD_PLAY_REV			(1<<31)  // initial shuttle direction (1=reverse)
#define DHD_SHUTTLE_MODE	(1<<30)  // clear if FF/REW Jog, set if Shuttle

#define DHD_INPOINT			(1<<29)	// set if moving inpoint
#define DHD_OUTPOINT			(1<<28)	// set if moving outpoint
#define DHD_VIDEOSLIDER		(1<<27)	// set if moving video slider
#define DHD_AUDIOSLIDER		(1<<26)  // set if moving audio slider

#define DHD_STR_UPDATE		(1<<17)
#define DHD_MOUSE_UPDATE	(1<<18)

struct RenderCallBack {
	void __asm (*RenderFn)(register __a0 APTR);
	struct FastGadget *FG;
	ULONG	Frame;
	ULONG	Min;
	ULONG	Max;
	ULONG	Flags;
	struct Window *win;
	struct PanelLine *pline;
	WORD	MouseY;		//initially same as sc_MouseY
	WORD	MouseX;		//initially same as sc_MouseX
	WORD	VelocityNumerator;
	UWORD	VelocityDenominator;
};

enum { STD_COMP_MODE, EXTD_COMP_MODE, AUDIO_COMP_MODE, 
		FASTSTD_COMP_MODE, FASTEXTD_COMP_MODE };

enum { AMODE_STEREO, AMODE_LEFT, AMODE_RIGHT, AMODE_NOAUDIO };
enum { TBC_BRT,TBC_CON,TBC_SAT,TBC_HUE,TBC_FAD,TBC_CPHZ,TBC_HPHZ,
			TBC_KEY,TBC_KEYM,TBC_ENC,TBC_INP,TBC_DEC,TBC_TRM};

// Modes for ES_CompressionMode; Low nibble is mode, high nibble is drive speed
#define COMP_STD		0x00
#define COMP_EXT		0x03
#define COMP_AUD		0x00 // doesn't matter here, this should set source
#define DRIVE_FAST	0x10
#define DRIVE_HOLOGRAPHIC	0x20
#define COMP_FSTD		COMP_STD|DRIVE_FAST
#define COMP_FEXT		COMP_EXT|DRIVE_FAST
#define COMP_FBIG		COMP_STD|DRIVE_HOLOGRAPHIC

#define TBCTERM_NUM	5
#define TBCSRC_NUM	4
#define TBCENCOD_NUM	4
#define TBCDECOD_NUM	3
#define TBCKEY_NUM	2
#define TBCKEYM_NUM	3
#define	PROPSCALE(v,l,h)	(( l + (v*(h-l))/MAXPOT ))
#define	AUDIO_BYTE	0xA2
#define MAX_AUD_FADE	750 // Max 1500 fields (Marty, Nov  3 1994)
#define	IS_AUDIO_DRIVE(FVI)		((FVI->Flags&FVIF_AUDIOREADY) && !(FVI->Flags&FVIF_VIDEOREADY))
#define	PAN_LEFT					-32768;
#define	PAN_RIGHT					32767;
#define HAS_LEFT(f)			((f&AUD_CH1_EXISTS) && !(f&AUD_CH2_EXISTS))
#define HAS_RIGHT(f)		(!(f&AUD_CH1_EXISTS) && (f&AUD_CH2_EXISTS))
#define HAS_STEREO(f)		((f&AUD_CH1_EXISTS) && (f&AUD_CH2_EXISTS))
#define HAS_ANYAUDIO(f)		(f&AUD_EXISTS)
#define IS_LEFT(f)			((f&AUD_CH1_ENABLE) && !(f&AUD_CH2_ENABLE))
#define IS_RIGHT(f)			(!(f&AUD_CH1_ENABLE) && (f&AUD_CH2_ENABLE))
#define IS_STEREO(f)		((f&AUD_CH1_ENABLE) && (f&AUD_CH2_ENABLE))
#define IS_ANYAUDIO(f)			(f&AUD_ENABLE)
#define IS_AUDENVELOPE(f)	(f&AUD_ENVELOPE)
#define SET_LEFT(f)			f = ( (f&(~AUD_CH2_ENABLE))|AUD_CH1_ENABLE )
#define SET_RIGHT(f)		f = ( (f&(~AUD_CH1_ENABLE))|AUD_CH2_ENABLE )
#define SET_STEREO(f)		f |= (AUD_CH1_ENABLE|AUD_CH2_ENABLE)
#define SET_NOAUDIO(f)	f &= ~AUD_ENABLE
#define SET_AUDENVELOPE(f)		f = (f|AUD_ENVELOPE)
#define SET_NOAUDENVELOPE(f)		f = (f&~AUD_ENVELOPE)


//#define SOURCE_INDEX_OFFSET	2 // This is the number of Flyer sources skipped
#define SOURCE_INDEX_OFFSET	0 // This is the number of Flyer sources skipped
															// in the popup/sources Array cause of no TBC
// #define AUDIO_ONLY_SOURCE		5-SOURCE_INDEX_OFFSET // Index of Audio Only popup element
                             // if CurFlySource == this, then flyer should get 0 as source
// #define IS_AUDIO_SOURCE(x) ((x)==AUDIO_ONLY_SOURCE)

#define CUTCLIP_PRESERVE		0
#define CUTCLIP_DESTROY			1

enum { CLIP_EMPTY,	CLIP_ACTIVE,	CLIP_LOCKED };

enum {
	PAL_BLACK,
	PAL_DGRAY,
	PAL_LGRAY,
	PAL_WHITE,
	PAL_LBLACK,
	PAL_DDGRAY,
	PAL_DYELLOW,
	PAL_LYELLOW,
// Those below may not complement/highlight correctly...
	PAL_LBROWN,
	PAL_DBROWN,
	PAL_RED,
	PAL_PINK,
	PAL_BLUE,
	PAL_CYAN,
	PAL_DGREEN,
	PAL_LGREEN
};


struct CutClipData {
	struct NewClip			*cl;			// Current sub-clip
	struct ClipDisplay	*ClipDisp;
	struct PanelLine		*TimePL;
	struct PanelLine		*StrPL;
	struct PanelLine		*LenPL;
	struct PanelLine		*FramePL;	// Icon frame slider PL
	struct PanelLine		*CommPL;
	struct RastPort		*RP;
	struct Window			*Window;
	ULONG						Tmin,Tmax;
	struct Gadget			*Frame;
	struct Gadget			*String;
	ULONG						clipnum;
	int						clipnumdigits;
};

struct NewClip	{
	struct MinNode	Node;
	ULONG	in;
	ULONG	out;
	ULONG	type;  // should be from CLIP enum
	ULONG	icon;
	char	*Name;
	char	*Comment;
	};

struct ClipDisplay {
	UWORD	X;
	UWORD	Y;
	UWORD	W;
	UWORD	H;
	ULONG	MinVal;
	ULONG	MaxVal;
	ULONG	Scale;   	// = (0xFFFF*W)/MaxVal
	struct RastPort *RP;
	struct MinList Clips;
	};


struct AEDKey	{
	struct MinNode	MN;
	ULONG	RealTime;		//Actual flyer field time value.
	ULONG	Time;				//Time in envelope display 
	UWORD	Value;			//Actual Value
	UWORD	Scaled_Time;	//Time scaled to 0-485	
	UWORD Scaled_Val;		//Actual Value scaled to fit envelope hight
	UBYTE	Act;				//Inactive,active,selected
	UBYTE Att;				//TimeLocked,Deleteable,
	};

// Att flags
#define TimeLocked	0x01;
#define Deleteable	0x02;
#define UnUsed			0x04;



struct AudEnvDisp {
	UWORD	X;
	UWORD	Y;
	UWORD	W;
	UWORD	H;
	ULONG InPoint;
	ULONG OutPoint;
	ULONG	FadeIn;
	ULONG	FadeOut;
	ULONG	MinVal;
	ULONG	MaxVal;
	ULONG SuperEnvWidth;
	ULONG HScale;						//keys per pixel or pixels per key.
	ULONG	VScale;						//vertical scaling factor.
	ULONG	KeyCount;					//number of keys in AEDKeys list.
	struct Gadget	 EnvDispGadget;
	struct Window	 *PWindow;
	struct AudioEnv *AETagTable;
	struct RastPort *RP;
	struct RastPort *DRP;
	struct BitMap	 *DBM;
	struct AEDKey	 *SELECTED_KEY;
	struct MinList  AEDKeys;
	};


enum	{
	AEDKey_Inact,	
	AEDKey_act,	
	AEDKey_sel	
};	
	
/*
struct EnvPLPtr {
	struct PanelLine *Title;	
	struct PanelLine *Divide;	
	struct PanelLine *Text;	
	struct PanelLine *Text2;	
	struct PanelLine *Action;	
	struct PanelLine *Time;	
	struct PanelLine *Volume;
	struct PanelLine *Text3;
	struct PanelLine *Divide2;
	struct PanelLine *Continue;
	struct PanelLine *Cancel;
	};
*/


struct BarGraph {
	UWORD	X;
	UWORD	Y;
	UWORD	W;
	UWORD	H;
	UWORD	Val;
	UWORD	MaxVal;
	ULONG	Scale;   	// = (0xFFFF*W)/MaxVal
	struct RastPort *RP;
	};

#define	NUMBARSEGS	3

struct SegBarGraph {
	struct RastPort *RP;
	UWORD	X,Y;
	UWORD	W,H;
	UWORD	Val;
	UWORD	MinVal[NUMBARSEGS];
	UWORD	MaxVal[NUMBARSEGS];
	ULONG	Scale;   	// = (0xFFFF*W)/MaxVal
	UWORD	ClipX,ClipY;
	UWORD	ClipW,ClipH;
	BOOL	ClipLit;
	UBYTE	ClipHoldTime;	// Clip light hold time
	UBYTE	DecaySlew;		// Decay slew rate
	UBYTE	pad;
	UBYTE	PeakHoldTime;	// Peak mark hold time
	UWORD	PeakValue;		// Peak value (pixel pos)
};

struct AudIndicator {
	UWORD	X;
	UWORD	Y;
	UWORD	W;
	UWORD	H;
	UWORD	MaxVal;
	UWORD	ClipX;
	BOOL	Clip1Lit;
	BOOL	Clip2Lit;
	UBYTE *Clip;
	struct RastPort *RP;
	};


struct	AudioSet {
	ULONG	Volume;			// 0-100
	ULONG	V1;					// 0-0xFFFF
	ULONG	V2;					// 0-0xFFFF
	UWORD	Balance;		// 0-0xFFFF
	UWORD	Mode;
	WORD	Pan1;
	WORD	Pan2;
	struct FastGadget *FG;
	ULONG	AudioOn;
};


struct TagMess {
	ULONG	tm_Tag;
	ULONG	*tm_Val;
	ULONG	tm_vSize;
	ULONG	tm_Flags;
	struct FastGadget *tm_FG;
};

enum {
	GB_CONTINUE=1,
	GB_CANCEL,
	GB_FINE_TUNE,
	GB_QUICK_TUNE,

	GB_PROCESS,
	GB_CUT,
	GB_REMOVE,
	GB_PREV,
	GB_NEXT,
	GB_REORG,
	GB_MAKECLIPS,
	GB_RECPANEL,
	GB_AUDIOENV,
};

// STATUS FOR ENVELOPE CONTROL
enum {
	KEY_DRAG=1,
	KEY_CREATE,
	KEY_DELETE
};

@


2.54
log
@added part of new audioenv panel.
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.53 1995/10/02 15:04:59 Flick Exp Holt $
d4 3
d235 4
d251 3
a253 2
#define AUD_EXISTS				(AUD_CH1_EXISTS|AUD_CH2_EXISTS)
#define AUD_ENABLE				(AUD_CH1_ENABLE|AUD_CH2_ENABLE)
d255 1
d364 1
d410 1
d432 1
d437 3
d513 68
d663 8
@


2.53
log
@Added PLID_DESTPOPUP, new define FLY_VOL_MAX for *usable* Flyer volume name size
@
text
@d2 5
a6 2
* $Id: Panel.h,v 2.52 1995/09/28 10:20:30 Flick Exp Flick $
* $Log: Panel.h,v $
d310 1
d578 1
@


2.52
log
@Removed messy RAW_ key defines, now uses RawKeyCodes.h for std Amiga mappings
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.51 1995/09/25 12:03:34 Flick Exp Flick $
d4 3
d173 1
d348 4
a351 1
#define	PLID_DROPIND	1		// Dropped fields indicator
@


2.51
log
@Added some new PL_ flags, the long-needed HALF1 positioning (few support this yet) plus a new
PLID system to pick out specific PLines within the panel (better than using PL_ flags!)
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.50 1995/09/19 12:46:53 Flick Exp Flick $
d4 4
a240 49

//***** Raw Key Codes *****//
#define	RAW_KEYUP		0x80

#define	RAWKEY_MINUS		0x0B
#define	RAWKEY_PLUS			0x0C
#define	RAWKEY_P				0x19
#define	RAWKEY_S				0x21
#define	RAWKEY_N				0x36
#define	RAWKEY_PADMINUS	0x4A
#define	RAWKEY_PADPLUS		0x5E
#define	RAWKEY_HELP			0x5F

#define RAW_F1			0x50
#define RAW_F2			0x51
#define RAW_F3			0x52
#define RAW_F4			0x53
#define RAW_F5			0x54
#define RAW_F6			0x55
#define RAW_F7			0x56
#define RAW_F8			0x57
#define RAW_F9			0x58
#define RAW_F10 		0x59
#define RAW_AMIGA_R 0x67
#define RAW_AMIGA_L 0x66
#define RAW_TAB     0x42
#define RAW_TILDE   0x00
#define RAW_CTRL    0x63
#define RAW_ENTER		0x43
#define RAW_RETURN	0x44
#define RAW_ESCAPE	0x45
#define RAW_HELP 		0x5f
#define RAW_TAB 		0x42
#define RAW_BKSPACE	0x41
#define RAW_DELETE	0x46
#define RAW_SPACE		0x40
#define RAW_UP 			0x4C
#define RAW_DOWN 		0x4D
#define RAW_RIGHT		0x4E
#define RAW_LEFT		0x4F
#define RAW_CUT 		0x32 	// 'x'
#define RAW_REC 		RAW_SPACE
#define RAW_IN 			0x5A // num-pad '('
#define RAW_OUT 		0x5B // num-pad ')'
#define RAW_DEL 		0x5D // num-pad '*'
#define RAW_LEN 		0x5C // num-pad '/'
#define RAW_PLUS 		0x5E // num-pad '+'
#define RAW_MINUS		0x4A // num-pad '-'
#define RAW_PERIOD	0x3C // num-pad '.'
@


2.50
log
@New GB_ stuff for GenButtons, new Panel initializer structure
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.49 1995/09/13 12:01:49 Flick Exp Flick $
d4 3
d218 3
d335 1
d383 1
d389 1
@


2.49
log
@Added stuff for fine control over PLine placement, structures for segmented
audio meters and CutClipDisplay, other beautification
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.48 1995/08/16 10:44:36 Flick Exp Flick $
d4 4
a318 1

d339 2
a340 1
	PAN_LOOP
d346 8
d589 15
a603 6
#define	GB_PROCESS	100
#define	GB_CUT		101
#define	GB_REMOVE	102
#define	GB_PREV		103
#define	GB_NEXT		104
#define	GB_REORG		105
@


2.48
log
@New PL_xxx defines for shadow/phantom functions
Added a partial RAWKEY_xxx list
@
text
@d2 6
a7 2
* $Id: panel.h,v 2.47 1995/07/27 18:09:28 Flick Exp Flick $
* $Log: panel.h,v $
d186 2
a187 1
#define PPOPUP_W 160
d278 1
a278 1
	PNL_TEXT=1,			// Label is text, PropStart is user height if label==NULL, skip if label=""
d283 16
a298 16
									// UserObj=1 for custom positioning via X,Y WORDs in Propstart
									// PropStart has position,G5 holds diff add-on, label should have space(s) on end
	PNL_TOGGLE,			// Param is bit mask, Param2, array of labels, PropEnd=#of toggles <=8
	PNL_FXSPEED,		// *Param is value, Param2 is array of 4(ULONG) field counts: S,M,F,V for FXTIME
									// PropStart=0(for FXTime update) or address of a PNL_TIME to update
	PNL_FXTIME,			// Like a DIFF, but attached to an FXSPEED
	PNL_STRING,			// String gadget Param=str ptr, PropEnd=max len, g5=optional gad width
	PNL_NUMBER,			// int gadget *Param=int , Propstart=min, propend=max
	PNL_POPUP,			// Param=names[], propstart=item, propend=max entries (NUM_VIEW)
									// UserFun = void __asm PopFunc(REG(a0) struct PanelLine *);
	PNL_CROUTON,		// good old 80x50 image.. param2=FG, param=comment, propend=commentbuf size
	PNL_SUBPANEL,		// param=f'n
	PNL_SLIDER,			// param=val, Propstart=min, propend=max
	PNL_DIVIDE,			// Just a line...
	PNL_VCR,				// VCR Controls w/ counter param=param2=counterval,
									// if param=NULL -> NO String gadget, just param2
d300 7
a306 7
	PNL_EZTIME,			// Mini-Slider time gad. HH:MM:SS:FF SMPTE, Param2=FXSpeed PLine to set to V
	PNL_EZLEN,			// Mini-Slider time gad. Length in SS:FF
	PNL_EZNUM,			// Mini-Slider integer gad. UserFun=f'n
	PNL_FLYTIME,		// just like PNL_TIME, but Flyer-ready, G2 = Flyer frame offset
	PNL_EZSLIDER,		// Balance slider with centering button, param=overall volume
									//  param2 is end labels array,
	PNL_FLYSLIDER,	// Plain slider with flyer controls, G2 = Flyer frame offset
d308 7
a314 7
	PNL_BUTTON,			// A Labeled button, calls UserFun()
	PNL_DUOSLIDE,		// Dual slider with in(*Param) and out(*Param2) values, G2=Flyer frame offset,
									// G1 is fake prop, G4 out string, G5, out prop(detached)
	PNL_CHECK,			// A single toggle button, Param=1/0, supports a long description
	PNL_STEPSLIDE,		// Slider with single-step buttons, optional
									// centering button (Param2!=NULL), which goes to *Param2
	PNL_NUMSLIDER		// Plain slider with number gadget...
d318 10
a327 1
enum { PNL_JUST=0,PNL_LEFT,PNL_CENTER,PNL_RIGHT };
d329 9
a337 1
enum { PAN_CANCEL, PAN_CONTINUE, PAN_EXPERT, PAN_EASY, PAN_PROCESS, PAN_LOOP }; // Panel() return values
d346 2
a347 2
	WORD	Width;
	WORD	Height;
d350 2
a351 2
	UWORD	(*Create)(UWORD,UWORD,struct PanelLine *,struct Gadget **);
	UWORD	(*Draw)(UWORD,UWORD,struct PanelLine *,struct Window *);
d354 1
a354 1
	ULONG	__asm (*UserFun)(REG(a1)struct PanelLine *, REG(a0)APTR Obj);
a356 1
//	WORD	Height;
d448 1
d450 21
a470 2
enum {	PAL_BLACK, PAL_DGRAY, PAL_LGRAY, PAL_WHITE,  // Palette colors
				PAL_LBLACK, PAL_DDGRAY, PAL_DYELLOW, PAL_LYELLOW };
d472 17
d522 20
d576 7
@


2.47
log
@Added PL_GENBUTT so I can add some freaking buttons
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.46 1995/06/20 23:43:16 Flick Exp Flick $
d4 3
d139 4
d203 3
a205 2
#define PL_SHADOW		(1<<13)	// In and Out maintain relative separation
#define PL_SILENT		(1<<14)	// This line is a partner tag-along, dont send switcher
d223 12
d342 1
@


2.46
log
@PL_ flags are now all in "1<<x" notation.  Protected them with ()'s  !!!
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.45 1995/04/25 15:06:21 Flick Exp Flick $
d4 3
d191 1
a191 1
//#define PL_???		(1<<9)
@


2.45
log
@Added ClipxLit flags in AudIndicator struct
@
text
@d2 5
a6 2
* $Id: Panel.h,v 2.44 1995/03/07 16:13:12 CACHELIN4000 Exp Flick $
* $Log: Panel.h,v $
d178 17
a194 16
#define PL_IN			1
#define PL_OUT		2
#define PL_DEL		4
#define PL_LEN		8
#define PL_AVAIL	16
#define PL_FLYER	32
#define PL_AUD1		64
#define PL_AUD2		128
#define PL_AUDIO	(PL_AUD1|PL_AUD2)
#define PL_CFRAME	256			// Tells numbers to round(down) to even frame
#define PL_DUAL		1024
#define PL_PLAY		2048
#define PL_SMREF	1<<12 // Smart Refresh window for requesters over panel
#define PL_PARTNER	1<<13 // Has a partner
#define PL_SHADOW		1<<13 // In and Out maintain relative separation
#define PL_SILENT		1<<14 // This line is a partner tag-along, dont send switcher
d298 3
a300 3
	UBYTE Type;
	UBYTE Align;
	char *Label;
d302 8
a309 7
	LONG *Param,*Param2;
	LONG PropStart,PropEnd;
	UWORD (*Create)(UWORD,UWORD,struct PanelLine *,struct Gadget **);
	UWORD (*Draw)(UWORD,UWORD,struct PanelLine *,struct Window *);
	BOOL (*Handle)(struct PanelLine *,struct  IntuiMessage *,struct Window *);
	void (*Destroy)(struct PanelLine *);
	ULONG __asm (*UserFun)(REG(a1)struct PanelLine *, REG(a0)APTR Obj);
d312 1
a312 1
	WORD Height;
d316 1
a316 1
	UWORD NumParts;		// Number or 'partner' PanelLines in Partners array
d318 1
a318 1
	ULONG *Relation; // Array of flags to describe type of relationship with that partner
@


2.44
log
@New FASTDRIVE compression mode support, fastdrive bit in config
@
text
@@


2.43
log
@Add AudIndicatro struct to replace BarGraph, which fell out of favor.
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.42 1995/02/24 11:11:38 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d345 3
a347 1
enum { STD_COMP_MODE, EXTD_COMP_MODE, AUDIO_COMP_MODE };
d351 9
@


2.42
log
@Add TagMess structure
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.41 1995/02/19 16:40:09 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d417 12
@


2.41
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.40 1995/02/19 01:43:46 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d425 9
@


2.40
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.39 1995/02/11 17:02:05 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d412 11
@


2.39
log
@add PNL_NUMSLIDER type, notes on STRING width
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.38 1995/02/01 17:56:11 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d256 1
a256 1
	PNL_FLYTIME,		// just like PNL_TIME, but Flyer-ready
d259 1
a259 1
	PNL_FLYSLIDER,	// Plain slider with flyer controls...
d262 1
a262 1
	PNL_DUOSLIDE,		// Dual slider with in(*Param) and out(*Param2) values,
@


2.38
log
@add some defines, etc.
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.37 1995/01/25 18:36:57 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d239 1
a239 1
	PNL_STRING,			// String gadget Param=str ptr, PropEnd=max len
d262 1
a262 1
	PNL_STEPSLIDE		// Slider with single-step buttons, optional 
d264 1
d393 11
@


2.37
log
@Add PNL_STEPSLIDER type
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.36 1995/01/24 16:39:54 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d113 2
a114 1
#define TEMP_CLIP_NAME "_._|~~x~~temp~~x~~|_._"
d175 1
d187 15
a209 4
#define RAW_IN 			0x5A // num-pad '('
#define RAW_OUT 		0x5B // num-pad ')'
#define RAW_DEL 		0x5D // num-pad '*'
#define RAW_LEN 		0x5C // num-pad '/'
d216 7
d266 1
a266 1
enum { PAN_CANCEL, PAN_CONTINUE, PAN_EXPERT, PAN_EASY, PAN_LOOP }; // Panel() return values
d326 12
a340 7
#define STD_COMP_MODE			0
#define EXTD_COMP_MODE		1
#define AUDIO_COMP_MODE		3  //0xFFFF
#define	AMODE_STEREO			0
#define	AMODE_LEFT				1
#define	AMODE_RIGHT				2
#define	AMODE_NOAUDIO			3
@


2.36
log
@Add Comment, icon to NewClip struct, etc.
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.35 1995/01/24 11:21:30 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d235 4
a238 1
	PNL_CHECK				// A single toggle button, Param=1/0, supports a long description
@


2.35
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.34 1995/01/13 12:59:00 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d109 1
d297 24
d322 2
a323 1
#define SOURCE_INDEX_OFFSET	2 // This is the number of Flyer sources skipped
d340 1
d342 1
@


2.34
log
@Add partner stuff to PanelLine struct,  PL_PARTNER and misc. flags
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.33 1994/12/24 12:42:46 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d104 2
d109 1
d120 1
a120 1
#define PSLIDE_H PTEXT_H+22
d293 9
@


2.33
log
@Note use of PropEnd for strings
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.32 1994/12/04 22:14:24 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d95 1
d150 3
d250 3
d254 3
@


2.32
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.31 1994/12/03 18:34:07 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d193 1
a193 1
	PNL_STRING,			// String gadget Param=str ptr, Param2=max len
d197 1
a197 1
	PNL_CROUTON,		// good old 80x50 image.. param2=FG, param=comment
@


2.31
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.30 1994/12/03 14:50:28 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d183 2
a184 1
	PNL_DIFF,				// DIFF is (*(Param) - *(Param2)) as a time field, PropEnd holds val
@


2.30
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.29 1994/12/03 13:42:26 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d124 1
@


2.29
log
@duoooh!!
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.28 1994/12/03 13:40:14 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d138 1
@


2.28
log
@Add define for TUNE_QUICK, and PNL_CHECK panel type
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.27 1994/11/30 23:25:17 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d198 1
a198 1
	PNL_DUOSLIDE		// Dual slider with in(*Param) and out(*Param2) values,
@


2.27
log
@add PL_SMREF flag
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.26 1994/11/04 16:50:35 CACHELIN4000 Exp CACHELIN4000 $
d4 3
d131 4
d197 1
@


2.26
log
@add PL_PLAY flag
@
text
@d2 5
a6 2
* $Id: Panel.h,v 2.25 94/10/27 23:14:51 CACHELIN4000 Exp Locker: CACHELIN4000 $
* $Log:	Panel.h,v $
d126 1
@


2.25
log
@Fix notes on UserFun, add Window to PanelLine struct.
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.24 94/10/25 08:10:57 Kell Exp Locker: CACHELIN4000 $
d4 3
d67 4
d122 1
@


2.24
log
@Added new flags to the RenderCallBack structure for Video FineTune.
@
text
@d2 5
a6 2
* $Id: panel.h,v 2.23 1994/10/11 21:41:21 CACHELIN4000 Exp Kell $
* $Log: panel.h,v $
d159 1
a159 1
									// Param2 = void __asm PopFunc(REG(a0) struct PanelLine *);
d166 1
a166 1
	PNL_PLAY,				// Stop/Play buttons for FX, etc.
d169 1
a169 3
	PNL_EZNUM,			// Mini-Slider integer gad. Param2=f'n(PLine->g5)
	PNL_FLYIO,			// [IMAGINARY] Dual-Slider time gad. *Param is in, *Param2 is out, 2
									// disconnected props are in prop, strings in str and g5
d171 2
a172 2
	PNL_EZSLIDER,		// param=val: RAW WORD horizpot - MAXPOT/2 not scaled, param2
									// is end labels array, which toggle center detent draw
d175 1
a175 1
	PNL_BUTTON,			// A Labeled button, calls Param2((a0)Param)
d204 1
@


2.23
log
@PNL_DUOSLIDE, UserFun, etc.
@
text
@d2 5
a6 2
* $Id: Panel.h,v 2.22 94/10/10 17:18:57 CACHELIN4000 Exp Locker: CACHELIN4000 $
* $Log:	Panel.h,v $
d210 6
@


2.22
log
@Add UserFunc(), UserObj to PanelLine structure...
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.21 94/10/05 00:56:46 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
d108 1
d171 3
a173 1
	PNL_BUTTON			// A Labeled button, calls Param2((a0)Param)
d176 1
a176 1
enum { PNL_JUST=0,PNL_LEFT=1, PNL_CENTER, PNL_RIGHT };
d178 1
a178 1
enum { PAN_CANCEL, PAN_CONTINUE, PAN_EXPERT, PAN_EASY }; // Panel() return values
d194 1
a194 1
	ULONG (*UserFun)(struct PanelLine *, APTR Obj);
a200 2


@


2.21
log
@Add PNL_Button type, f'n in EZNUM
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.20 94/09/27 17:18:19 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
d120 4
d133 1
d188 2
d195 1
a195 1
// append PanelLine methods: Add, Remove, Draw, Refresh, HandleEvent, etc.
@


2.20
log
@Add f'n call to POPUP line Param2
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.19 94/09/24 15:13:00 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
d132 2
a133 1
	PNL_DIFF,				// DIFF is (*(Param) - *(Param2)) as a time field, label should have space(s) on end
d151 1
a151 1
	PNL_EZNUM,			// Mini-Slider integer gad.
d158 2
a159 1
	PNL_SKIP				// A way of ignoring irrelevant lines without chnaging param
@


2.19
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.18 94/09/22 17:49:58 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
d137 1
@


2.18
log
@Comment EZSlider changes
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.17 94/09/20 23:40:59 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
a84 5
//#define GAD_IN	0  // Indices for global array to match keys with plines
//#define GAD_OUT 1
//#define GAD_DEL 2
//#define GAD_LEN 3

d95 1
d138 2
a139 1
	PNL_VCR,				// VCR Controls w/ counter param=counterval
@


2.17
log
@Add PNL_SKIP type
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.16 94/09/13 20:20:12 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
d144 1
a144 1
	PNL_FLYIO,			// Dual-Slider time gad. *Param is in, *Param2 is out, 2
d147 1
a147 1
	PNL_EZSLIDER,		// param=val, Propstart=min, propend=max, no buttons, param2
d150 1
a150 1
	PNL_SKIP				// A way of ignoring irrelevant lines
@


2.16
log
@Move PNL_CROUTON FG to Param2, Audio bit defs, RCB struct change
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.15 94/09/12 13:01:29 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 2
d7 1
d146 2
a147 1
	PNL_FLYSLIDER		// Plain slider with flyer controls...
@


2.15
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.14 94/09/09 20:21:40 CACHELIN4000 Exp Locker: CACHELIN4000 $
a3 2
*Revision 2.14  94/09/09  20:21:40  CACHELIN4000
**** empty log message ***
a10 3
*Revision 2.11  94/09/05  20:25:08  Kell
**** empty log message ***
*
a16 3
*Revision 2.8  1994/09/05  18:00:51  Kell
**** empty log message ***
*
a19 3
*Revision 2.6  1994/08/31  18:10:49  CACHELIN4000
**** empty log message ***
*
a22 12
*Revision 2.4  94/07/14  15:08:15  CACHELIN4000
**** empty log message ***
*
*Revision 2.3  94/07/04  18:41:45  CACHELIN4000
**** empty log message ***
*
*Revision 2.2  94/06/22  10:44:47  CACHELIN4000
**** empty log message ***
*
*Revision 2.1  94/06/07  10:18:02  CACHELIN4000
**** empty log message ***
*
d54 1
d76 4
a79 4
#define GAD_IN	0  // Indices for global array to match keys with plines
#define GAD_OUT 1
#define GAD_DEL 2
#define GAD_LEN 3
d81 1
d88 11
d115 1
a115 7
/*
#define ID_TOG1			ID_BOOL+750
#define ID_TOG2			ID_TOG1+1
#define ID_TOG3			ID_TOG2+1
#define ID_TOG4			ID_TOG3+1
#define ID_TOG5			ID_TOG4+1
 */
d117 1
a117 1
	PNL_TEXT=1,
d129 1
a129 1
	PNL_CROUTON,		// good old 80x50 image.. param=FG, param2=comment
d175 2
a176 2
#define DHD_PLAY_REV			(1<<31)
#define DHD_SHUTTLE_MODE	(1<<30)
d178 1
a178 1
#define DHD_MOUSE_UPDATE		(1<<18)
d183 1
a183 1
	ULONG	Frame;		
d186 1
a186 2
	ULONG	Flags;		//bit 31 = initial shuttle direction (1=reverse)
				//bit 30 = clear if FF/REW, set if Shuttle
a188 1

d191 2
a192 7

// Velocity = (NormalStep+(SkipStep/FramesPerSkip))/FieldsPerFrame 
// Also SkipStep=0 then shuttle is stopped, else Direction = sign(SkipStep)
	UWORD	FieldsPerFrame;	//never zero
	WORD	NormalStep;	
	WORD	SkipStep;
	UWORD	FramesPerSkip;	//never zero
@


2.14
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.13 94/09/09 15:33:51 Kell Exp Locker: CACHELIN4000 $
d4 3
d59 5
d96 1
@


2.13
log
@Bit 30 of flags indicates if in FF/REW or Shuttle mode.
@
text
@d2 5
a6 2
* $Id: panel.h,v 2.12 1994/09/07 11:02:28 CACHELIN4000 Exp Kell $
* $Log: panel.h,v $
d143 3
a145 3
	PNL_EZLEN,				// Mini-Slider time gad. Length in SS:FF
	PNL_EZNUM,				// Mini-Slider integer gad.
	PNL_FLYIO,				// Dual-Slider time gad. *Param is in, *Param2 is out, 2
d148 1
a148 1
	PNL_EZSLIDER		// param=val, Propstart=min, propend=max, no buttons, param2
d150 1
d178 2
d181 6
@


2.12
log
@add some PNL_types for Flyer, etc.
@
text
@d2 5
a6 2
* $Id: Panel.h,v 2.11 94/09/05 20:25:08 Kell Exp Locker: CACHELIN4000 $
* $Log:	Panel.h,v $
d181 2
a182 1
	ULONG	Flags;		//bit 32 = initial shuttle direction (1=reverse)
@


2.11
log
@*** empty log message ***
@
text
@d2 5
a6 2
* $Id: panel.h,v 2.10 1994/09/05 20:16:46 Kell Exp Kell $
* $Log: panel.h,v $
d57 1
a57 1
#define PNL_WIDTH 256 // 238
d110 1
a110 1

d116 1
a116 1

d130 1
a130 1
	PNL_CROUTON,		// good old 80x50 image.. param=BitMap, param2=f'n
d138 6
a143 1
	PNL_EZNUM				// Mini-Slider integer gad.
@


2.10
log
@Added more fields to define Shuttle Speed.
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.9 1994/09/05 18:01:51 Kell Exp Kell $
d4 3
d178 1
@


2.9
log
@Added shuttle speed/direction information to the RenderCallBack struct.
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.8 1994/09/05 18:00:51 Kell Exp Kell $
d4 3
d174 5
a178 2
	UWORD	FieldsPerFrame;	//frame rate, usually 1, 2, 4, 8, 16 ...
	WORD	FieldStep;	//direction & speed per frame
@


2.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.7 1994/09/02 08:26:04 Kell Exp Kell $
d4 3
@


2.7
log
@Put MouseX/Y fields into the RenderCallBack structure.
@
text
@d2 1
a2 1
* $Id: panel.h,v 2.6 1994/08/31 18:10:49 CACHELIN4000 Exp Kell $
d4 3
d158 1
a158 1
	ULONG	Frame;
d161 1
a161 1
	ULONG	Flags;
d164 1
d167 3
@


2.6
log
@*** empty log message ***
@
text
@d2 5
a6 2
* $Id: Panel.h,v 2.5 94/08/30 17:22:36 CACHELIN4000 Exp Locker: CACHELIN4000 $
* $Log:	Panel.h,v $
d161 2
@


2.5
log
@Add PL_Flags, definitions
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.4 94/07/14 15:08:15 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
a128 13

//*******************************************************************
struct RenderCallBack {
	void __asm (*RenderFn)(register __d0 ULONG, register __a0 APTR);
	struct FastGadget *FG;
	ULONG	Frame;
	ULONG	Min;
	ULONG	Max;
	ULONG	Flags;
	struct Window *win;
	struct Gadget *gad;
};

d147 12
@


2.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
* $Id: Panel.h,v 2.3 94/07/04 18:41:45 CACHELIN4000 Exp Locker: CACHELIN4000 $
d4 3
d67 7
d151 2
@


2.3
log
@*** empty log message ***
@
text
@Binary files Panel.h and t:,RCSt1A70db7a0 differ
@


2.2
log
@*** empty log message ***
@
text
@Binary files Panel.h and t:,RCSt1A70fb3d8 differ
@


2.1
log
@*** empty log message ***
@
text
@Binary files Panel.h and t:,RCSt1A70d7800 differ
@


2.0
log
@FirstCheckIn
@
text
@Binary files Panel.h and t:,RCSt1A70d7d00 differ
@
