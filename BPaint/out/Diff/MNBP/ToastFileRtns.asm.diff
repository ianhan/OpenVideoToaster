3c3,5
< 	include "ram:mod.i"
---
> 	xdef	LoadToastFile	;displays it on a line by line basis,
> 				;with cancel option...
> 				;this is my substitue for LoadRGBPicture
5,6d6
< 	xdef	LoadToastFile				;displays it on a line by line basis with cancel option, this is my substitue for LoadRGBPicture
< 	include "ps:assembler.i"			;assembler stuff
9c9
< 	include "commonrgb.i"				;newtek's include
---
> 	include "commonrgb.i"	;newtek's include
12d11
< 	include	"ps:serialdebug.i"
13a13
> 
18,68d17
< ;SERDEBUG	equ	1
< 	ALLDUMPS
< 
< rset_addrbit:	MACRO							;codesize 20bytes
< 	move.B	(a0)+,d6						;dither from 'gimmedither'
< 	ASR.B	#2,d6							;only 4 bits of dither, now
< 	move.b	d7,(a6)+						;s_PlotFlag
< 	move.b	d6,(a6)							;june22;d6,s_DitherThresh-s_PlotFlag(a6)
< 	lea	(s_SIZEOF-1)(a6),a6					;june22;s_SIZEOF(a6),a6
< 	ENDM
< 
< rsnybble:	MACRO
< 	rset_addrbit
< 	rset_addrbit
< 	rset_addrbit
< 	rset_addrbit
< 	ENDM
< 
< LOWERDITHER set 3 							;cloned from scratch
< 	xref random_seed_
< 	xref Pred_
< 	xref Pgreen_
< 	xref Pblue_
< 
< ;nxtrandom:	MACRO							;d-register,  (using d5 as subst for random_seed)
< ;	MOVE.W	random_seed_(BP),\1					;compute next random seed (longword)
< ;	LSR.W	#1,\1
< ;	BCC.s	norflip\@
< ;	EOR.W	#$B400,\1						;algo ref: Dr. Dobb's Nov86 pg 50,55
< ;norflip\@:
< ;	MOVE.W	\1,random_seed_(BP)
< ;		;JUNE
< ;	and.W	#$0f,\1							;bottom 4 bits
< ;	subq	#LOWERDITHER,\1
< ;	bcc.s	nxrok\@
< ;	moveq	#0,\1
< ;nxrok\@:
< ;		ENDM
< 
< 	xref	LocalToastBase						;toastglue.o
< CALLTB:	MACRO
< 	xref \1ADR							;RELOCATABLE, YECH!
< 	movem.l	a3/a5,-(sp)
< 	move.l	\1ADR,a3
< 	move.l	LocalToastBase,a5
< 	jsr	(a3)							;*** CRASH CITY ***
< 	movem.l	(sp)+,a3/a5
< 	ENDM
< 
< 
< 
69a19
> 
71,72c21,22
< 	TST.L	D0							;not documented...I though you only had to check for zero
< 	bne	errornoload						;doneload
---
> 	TST.L	D0		;not documented...I though you only had to check for zero
> 	bne	errornoload	;doneload
77,78c27,28
< ;WANT?;-no-;bsr	LOADPICTUREDATA
< 	bsr	LineByLine						;calls LoadRGBLine
---
> 	;WANT?;-no-;bsr	LOADPICTUREDATA
> 	bsr	LineByLine		;calls LoadRGBLine
84c34
< 	moveq	#0,d0							;no error...
---
> 	moveq	#0,d0		;no error...
89c39
< 	moveq	#-1,d0							;error from queryfile...
---
> 	moveq	#-1,d0		;error from queryfile...
92a43,56
> 
> ;----------------------------------
> 
> 	xref	LocalToastBase		;toastglue.o
> CALLTB:	MACRO
> 	xref \1ADR		;RELOCATABLE, YECH!
> 
> 	movem.l	a3/a5,-(sp)
> 	move.l	\1ADR,a3
> 	move.l	LocalToastBase,a5
> 	jsr	(a3)			;*** CRASH CITY ***
> 	movem.l	(sp)+,a3/a5
> 		ENDM
> 
94d57
< 	DUMPMSG	<STARTLOADRGBPICTURE>	
96,97c59,60
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
< 	move.l	DOSLibrary_(BP),a6					;NOT DOCUMENTED...
---
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
> 	move.l	DOSLibrary_(BP),a6		;NOT DOCUMENTED...
101d63
< 
103,105c65,66
< 	DUMPMSG	<QUERYFILE>
< 	lea	FilenameBuffer_(BP),a0					;picture struct
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
---
> 	lea	FilenameBuffer_(BP),a0	;picture struct
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
107,113c68,73
< ;NOV91....only use switcher routines for framestore stuff
< 	tst.l	d0							;error code?
< 	bne	9$							;yep....else check PictureInfo structure
<  
<  ifc 't','f'	;; May need to change to work with alpha framestores.111794
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
< 	;tst.w	PI_COMPOSITEFLAG(a1)					;bit 8 means composite commonrgb.i
---
> 		;NOV91....only use switcher routines for framestore stuff
> 	tst.l	d0			;error code?
> 	bne.s	9$			;yep....else check PictureInfo structure
>   ifc 't','f'
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
> 	;tst.w	PI_COMPOSITEFLAG(a1)	;bit 8 means composite commonrgb.i
115c75
< 	cmp.w	#16,PI_Planes(a1)					;number of planes in 1 scan line
---
> 	cmp.w	#16,PI_Planes(a1)	;number of planes in 1 scan line
117c77,79
<  endc
---
>   endc
>   ifc 't','f'
> 		;assume ok, but really, only let "real" .fs. filenames thru
119,123c81,85
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
< 	DUMPMEM	<Picture info>,(A1),#300
< 	DUMPMEM	<alpha depth>,PI_AlphaDepth(A1),#4
< 	DUMPMEM	<alpha planes>,PI_ALPHA(A1),#64		
< 	tst.l	PI_PLANETYPE(a1)					;if this is zero, cannot read file"
---
> 	bsr	checkFSname	;return EQ is ".fs." type, NE if invalid frame filename
> 	beq.s	9$
>   endc
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
> 	tst.l	PI_PLANETYPE(a1)	;if this is zero, cannot read file"
125c87
< 	moveq	#-4,d0							;setup an error code
---
> 	moveq	#-4,d0		;setup an error code
128a91
>   ifc 't','f'
129a93,125
> checkFSname:	;return EQ is ".fs." type, NE if invalid frame filename
> 	lea	FilenameBuffer_(BP),a1
> 
> 	tst.b	(a1)		;check for "short" (or empty) filename
> 	beq.s	notfsname
> 	tst.b	1(a1)
> 	beq.s	notfsname
> 	tst.b	2(a1)
> 	beq.s	notfsname
> 
> 	cmp.b	#'.',3(a1)
> 	bne.s	9$
> 
> 	cmp.b	#'f',4(a1)
> 	beq.s	1$
> 	cmp.b	#'F',4(a1)
> 	bne.s	9$
> 1$
> 	cmp.b	#'s',5(a1)
> 	beq.s	3$
> 	cmp.b	#'S',5(a1)
> 	bne.s	9$
> 3$
> 
> 	cmp.b	#'.',6(a1)
> 9$	RTS
> 
> notfsname:
> 	moveq	#-1,d0	;flag NE
> 	RTS		;checkfsname
>   endc ;checkfsname
> 
> 
131,132c127
< 	DUMPMSG	<CLOSEQUERY>
< 	lea	PictureInfo_(BP),a0					;pictureinfo struct
---
> 	lea	PictureInfo_(BP),a0	;pictureinfo struct
136d130
< 
138,139c132
< 	DUMPMSG	<STOPLOADRGBPICTURE>
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
---
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
143d135
< 
146,149c138,140
< 	DUMPMSG	<LOADPICTUREDATA>
< 	lea	BigPicRGB_(BP),a0					;picture struct
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
< 	xref LoadPictureDataADR						;RELOCATABLE, YECH!
---
> 	lea	BigPicRGB_(BP),a0	;picture struct
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
> 	xref LoadPictureDataADR		;RELOCATABLE, YECH!
152c143
< 	xref	LocalToastBase						;toastglue.o
---
> 	xref	LocalToastBase		;toastglue.o
154c145
< 	move.l	a5,a2							;SHOULD THIS BE A5 or A2?
---
> 	move.l	a5,a2			;SHOULD THIS BE A5 or A2?
163,164c154,157
< 	;;;xdef	WholeHam						;redo's ham display, if possible
< 	xref	FlagWholeHam_						;'main loop' handles this flag -> Wham.asm
---
> 
> 	;;;xdef	WholeHam		;redo's ham display, if possible
> 
> 	xref	FlagWholeHam_		;'main loop' handles this flag -> Wham.asm
169,170c162,163
< 	xref	FlagFrbx_						;set if need screen arrange
< 	xref	FlagToolWindow_						;set/cleared...toolbox (wanna be) shown?
---
> 	xref	FlagFrbx_		;set if need screen arrange
> 	xref	FlagToolWindow_		;set/cleared...toolbox (wanna be) shown?
175,177c168,170
< ;WholeHam:								;redo's ham display, if possible
< LineByLine:								;redo's ham display, if possible
< 	;2.0;tst.b	FlagWholeHam_(BP) 				;'main loop' handles this flag -> Wham.asm
---
> ;WholeHam:	;redo's ham display, if possible
> LineByLine:	;redo's ham display, if possible
> 	;2.0;tst.b	FlagWholeHam_(BP) 	;'main loop' handles this flag -> Wham.asm
181c174,180
< 	beq	end_wholeham						;nope, can't do this if don't have rgb data
---
> 	beq	end_wholeham	;nope, can't do this if don't have rgb data
> 
>   IFC 't','f' ;....don't need this check/skip out...
> 		;july311990....don't replot if r,g,b buffers=black AND color 0=black
> 	xref HiresColorTable_
> 	cmp.w	#0,HiresColorTable_(BP)	;color=black?
> 	bne.s	continue_notblack
182a182,216
> 	lea	BigPicRGB_(BP),a0
> 	move.w	(a0),d0			;width
> 	mulu	2(a0),d0		;*height=size
> 	;subq.l	#1,d0			;db' type loop
> 
> 	move.l	bm_Planes(a0),a1	;check out reds...all=black?
> 	bsr.s	checkblock
> 	bne.s	continue_notblack	
> 	move.l	4+bm_Planes(a0),a1	;check out greens...all=black?
> 	bsr.s	checkblock
> 	bne.s	continue_notblack	
> 	move.l	8+bm_Planes(a0),a1	;check out blues...all=black?
> 	bsr.s	checkblock
> 	bne.s	continue_notblack	
> 	bra	done_wholeham
> checkblock:
> 	move.l	d0,d1	;loop counter
> checknext:
> 	;tst.b	(a1)+	;THIS COULD BE SPED UP, DEFINITELY....
> 	;bne.s	foundone
> 	;subq.l	#1,d1
> 	;bne.s	checknext
> 
> 		;AUG191990...(I got tired of waiting for this loop...)
> 	tst.L	(a1)+	;THIS COULD BE SPED UP, DEFINITELY....
> 	bne.s	foundone
> 	subq.l	#4,d1
> 	bgt.s	checknext
> foundone:
> 	rts
> continue_notblack:
> 
>   ENDC ;IFC 't','f' ;....don't need this check/skip out...
> 
> 
183a218,219
> 	;-redisplay code-
> 
187,189c223,225
< ;	movem.w	(a1)+,d0/d1						;width,ht
< ;	mulu	d1,d0							;=planesize
< ;	addq	#4,a1							;skip flags, etc in bitmap struct
---
> ;	movem.w	(a1)+,d0/d1	;width,ht
> ;	mulu	d1,d0		;=planesize
> ;	addq	#4,a1		;skip flags, etc in bitmap struct
191c227
< ;	moveq	#6-1,d2							;db' loop
---
> ;	moveq	#6-1,d2		;db' loop
199,202c235,239
< 	xjsr	SetPointerWait						;interrupt-able
< 	sf	FlagToolWindow_(BP)					;TOOLS hidden	;SEP131990
< 	st	FlagFrbx_(BP)						;ask for screen arrange	;SEP131990
< 	xjsr	ScreenArrange						;GadgetRtns.asm, hides toolbox	;SEP131990
---
> 	xjsr	SetPointerWait		;interrupt-able
> 	;;;xjsr	SetAltPointerWait	;non-interrupt-able
> 	sf	FlagToolWindow_(BP)	;TOOLS hidden	;SEP131990
> 	st	FlagFrbx_(BP)		;ask for screen arrange	;SEP131990
> 	xjsr	ScreenArrange		;GadgetRtns.asm, hides toolbox	;SEP131990
205,210c242,247
< 	;;lea	BigPicRGB_(BP),a0					;...using STACK for line#s
< 	;;move.w	#0,-(sp)					;current line#
< 	;;move.w	2(a0),-(sp)					;#rows ON SCREEN
< 	move.w	#0,-(sp)						;current line#
< 	lea	PictureInfo_(BP),a0					;...using STACK for line#s
< 	move.l	PI_BMHEADER(a0),a0					;bitmap
---
> 	;;lea	BigPicRGB_(BP),a0	;...using STACK for line#s
> 	;;move.w	#0,-(sp)		;current line#
> 	;;move.w	2(a0),-(sp)		;#rows ON SCREEN
> 	move.w	#0,-(sp)		;current line#
> 	lea	PictureInfo_(BP),a0	;...using STACK for line#s
> 	move.l	PI_BMHEADER(a0),a0	;bitmap
212,213c249,250
< ;NOV05'91;move.w bym_Rows(a0),-(sp)					;#rows IN FILE
< 									;ensure only # of rows on screen are loaded
---
> 	;NOV05'91;move.w	bym_Rows(a0),-(sp)	;#rows IN FILE
> 		;ensure only # of rows on screen are loaded
219c256
< 123$	move.w	d0,-(sp)						;#rows IN FILE
---
> 123$	move.w	d0,-(sp)	;#rows IN FILE
221c258
< 	move.l	#$B0bB0bD1,random_seed_(BP)				;for same dither every screen
---
> 	move.l	#$B0bB0bD1,random_seed_(BP)	;for same dither every screen
225c262,263
< ;?;  IFC 't','f' ;WANT...2.0						;LOAD ONE LINE FROM FILE (2.0)
---
> ;?;  IFC 't','f' ;WANT...2.0
> 		;LOAD ONE LINE FROM FILE (2.0)
227c265
< 	move.w	2(sp),d0						;line#
---
> 	move.w	2(sp),d0			;line#
230,233c268,271
< 	lea	BigPicRGB_(BP),a0					;picture struct
< 	lea	PictureInfo_(BP),a1					;pictureinfo struct
< 	move.l	DOSLibrary_(BP),a6					;NOT DOCUMENTED...
< ;	DUMPMSG	<Line>
---
> 	lea	BigPicRGB_(BP),a0	;picture struct
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
> 	move.l	DOSLibrary_(BP),a6		;NOT DOCUMENTED...
> 
238,246c276,285
< 	;setup dither threshold for each record in 'savearray'
< 	movem.l	d0-d2/a0/a1/a6,-(sp)					;FLAG LINE TO BE RENDERED, THEN DISPLAY HAM PREVIEW 03DEC91
< 	xref	SolLineTable_
< 	moveq	#0,d0
< 	move.w	6*4+2(sp),d0						;ldline_w_(BP),d1
< 	tst.l	SolLineTable_(BP)					;03DEC91
< 	beq.s	allnosolflag
< 	move.l	SolLineTable_(BP),a0
< 	sf	0(a0,d0.w)						;flag line with new rgb info
---
> 		;setup dither threshold for each record in 'savearray'
> 	movem.l	d0-d2/a0/a1/a6,-(sp)
> 		;FLAG LINE TO BE RENDERED, THEN DISPLAY HAM PREVIEW 03DEC91
> 		xref	SolLineTable_
> 		moveq	#0,d0
> 		move.w	6*4+2(sp),d0		;ldline_w_(BP),d1
> 		tst.l	SolLineTable_(BP)	;03DEC91
> 		beq.s	allnosolflag
> 		move.l	SolLineTable_(BP),a0
> 		sf	0(a0,d0.w)	;flag line with new rgb info
249,250c288,289
< 	move.w	6*4+2(sp),d1						;ldline_w_(BP),d1
< 	xjsr	GimmeDither						;d0/1=x/y.w returns a0=table, d0=constant
---
> 	move.w	6*4+2(sp),d1		;ldline_w_(BP),d1
> 	xjsr	GimmeDither	;d0/1=x/y.w returns a0=table, d0=constant
252,254c291,293
< 	lea	SaveArray_(BP),a6 					;use the save table as source
< 	;lea	s_DitherThresh(a6),a6					;use the save table as source
< 	lea	s_PlotFlag(a6),a6					;use the save table as source
---
> 	lea	SaveArray_(BP),a6 ;use the save table as source
> 	;lea	s_DitherThresh(a6),a6	;use the save table as source
> 	lea	s_PlotFlag(a6),a6	;use the save table as source
258,260c297,299
< 	addq	#1,d4							;=bytesperrow (to repaint)
< 	add.w	d4,d4							;=nybblesperrow
< 	subq	#1,d4							;db' type loop counter
---
> 	addq	#1,d4	;=bytesperrow (to repaint)
> 	add.w	d4,d4	;=nybblesperrow
> 	subq	#1,d4	;db' type loop counter
263,264c302,316
< 
< 	rsnybble							;4bits
---
> rset_addrbit:	MACRO	;codesize 20bytes
> 	;not for static...;nxtrandom d6		;MACRO, compute another random #
> 		;compute static dither
> 	move.B	(a0)+,d6	;dither from 'gimmedither'
> 	ASR.B	#2,d6		;only 4 bits of dither, now
> 	move.b	d7,(a6)+	;s_PlotFlag
> 	move.b	d6,(a6)	;june22;d6,s_DitherThresh-s_PlotFlag(a6)
> 	lea	(s_SIZEOF-1)(a6),a6	;june22;s_SIZEOF(a6),a6
> 	ENDM
> rsnybble:	  MACRO
> 	rset_addrbit
> 	rset_addrbit
> 	rset_addrbit
> 	rset_addrbit
> 	ENDM
265a318
> 	rsnybble	;4bits
266a320,321
> 	;;;bra.s	enda_dithsup	;end of (none,matrix,random) dither setup
> 
268a324,325
> 
> 
270c327,329
< 	xjsr	ScrollAndCheckCancel					;uses/dumps "scroll" mousemoves
---
> 	xjsr	ScrollAndCheckCancel	;uses/dumps "scroll" mousemoves
> 	;SEP131990;bne.s	777$		;cancel, or any message, kills "wholeham"
> 	;SEP131990;xjsr	CheckIDCMP
271a331
> 	;SEP131990;beq.s	777$			;ok, no cancel....
273c333,337
< 	xjsr	Canceler						;canceler.asm, cancel/continue?
---
> 	;2.0;xjsr	CancelRemapRtn		;canceler.asm, returns zero flag... ***2.0, 'end file load?'
> 	xjsr	Canceler		;canceler.asm, cancel/continue?
> 
> 777$	movem.l	(sp)+,d0-d2/a0/a1/a6
> 	;july021990;bne	abort_wholeham
275,281c339
< 777$	movem.l	(sp)+,d0-d2/a0/a1/a6					;july021990;bne	abort_wholeham
< 	bne	abort_wholeham						;SEP131990...
< 		
< 	movem.l	d0-d2/a0/a1/a6,-(sp)					;ensure that hires gadgets are ok after requester...SEP131990
< 	st	FlagFrbx_(BP)						;ask for screen arrange...SEP131990
< 	xjsr	ScreenArrange						;GadgetRtns.asm, hides toolbox	;SEP131990
< 	xjsr	SetAltPointerWait					;non-interrupt-able(!) - resets idcmp...
---
> 	bne	abort_wholeham	;SEP131990...
282a341,347
> 		;ensure that hires gadgets are ok after requester...SEP131990
> 	movem.l	d0-d2/a0/a1/a6,-(sp)
> 	;xjsr	ReDoHires		;tool.code.i
> 	;xjsr	DisplayText		;ShowTxt.asm
> 	st	FlagFrbx_(BP)		;ask for screen arrange...SEP131990
> 	xjsr	ScreenArrange		;GadgetRtns.asm, hides toolbox	;SEP131990
> 	xjsr	SetAltPointerWait	;non-interrupt-able(!) - resets idcmp...
284a350
> 
288c354
< 	move.w	(a1),d2							;#pixels to grab
---
> 	move.w	(a1),d2			;#pixels to grab
290,291c356,357
< 	;move.w	2(a1),d1						;#rows in bitmap
< 	;sub.w	(sp),d1							;this row #
---
> 	;move.w	2(a1),d1		;#rows in bitmap
> 	;sub.w	(sp),d1			;this row #
295c361
< 	sub.w	(sp),d1							;d1=this row# (screen reference)
---
> 	sub.w	(sp),d1			;d1=this row# (screen reference)
297,303c363,372
< 	lea	SaveArray_(BP),a0					;1st pixel's "record" inside savearray
< 	xjsr WhamGetRGB							;get pixel data from RGB arrays (ZERO flag if none)
< 									;d0=pixel# (even multiple of 32)
< 									;d1=row#
< 									;d2=#pixels
< 									;a0=savearray
< 									;re-determine what to plot in ham mode
---
> 	lea	SaveArray_(BP),a0	;1st pixel's "record" inside savearray
> 	;xjsr GenGetRGB	;get pixel data from RGB arrays (ZERO flag if none)
> 	xjsr WhamGetRGB	;get pixel data from RGB arrays (ZERO flag if none)
> 	;;;from scratch...;;;sne	Flag24_(BP)	;...Flag24 is set at ReadBody, then set/reset after GetRGB
> 		;d0=pixel# (even multiple of 32)
> 		;d1=row#
> 		;d2=#pixels
> 		;a0=savearray
> 
> 	;re-determine what to plot in ham mode
307,309c376,378
< 	move.w	(a0),d2							;bitmap width
< 	asl.w	#3,d2							;*8, bytes to pixels
< 	subq.w	#1,d2							;db' loop
---
> 	move.w	(a0),d2		;bitmap width
> 	asl.w	#3,d2		;*8, bytes to pixels
> 	subq.w	#1,d2		;db' loop
313c382
< 	move.l	DetermineRtn_(BP),A4					;D2,A4 *not* used by DetermineRtn
---
> 	move.l	DetermineRtn_(BP),A4	;D2,A4 *not* used by DetermineRtn
317c386
< 	MOVE.L	LongColorTable_(BP),d1					;color zero
---
> 	MOVE.L	LongColorTable_(BP),d1	;color zero
321,326c390,402
< det_loop:								;REALLY WANT TO DITHER...
< 	;move.l	(a6),d0 ;s_red						;set up 'old' for next guy's determine
< 	;asR.l	#4,d0							;8bits down to 4
< 	;and.l	#$0f0f0f00,d0						;top bit strip (asr crawl down)
< 	;;move.l	d0,Predold_(BP)					;NOTE: Messes up 'last plot', lost it long ago...
< 	;move.l	d0,Pred_(BP)						;old/existing rgb colors
---
> det_loop:
> 		;REALLY WANT TO DITHER...
> 	;move.l	(a6),d0 ;s_red	;set up 'old' for next guy's determine
> 	;asR.l	#4,d0		;8bits down to 4
> 	;and.l	#$0f0f0f00,d0	;top bit strip (asr crawl down)
> 	;;move.l	d0,Predold_(BP)	;NOTE: Messes up 'last plot', lost it long ago...
> 	;move.l	d0,Pred_(BP)	;old/existing rgb colors
> 
> LOWERDITHER set 3 ;cloned from scratch
> 	xref random_seed_
> 	xref Pred_
> 	xref Pgreen_
> 	xref Pblue_
327a404,418
> ;nxtrandom:	MACRO	;d-register,  (using d5 as subst for random_seed)
> ;	MOVE.W	random_seed_(BP),\1	;compute next random seed (longword)
> ;	LSR.W	#1,\1
> ;	BCC.s	norflip\@
> ;	EOR.W	#$B400,\1	;algo ref: Dr. Dobb's Nov86 pg 50,55
> ;norflip\@:
> ;	MOVE.W	\1,random_seed_(BP)
> ;		;JUNE
> ;	and.W	#$0f,\1		;bottom 4 bits
> ;	subq	#LOWERDITHER,\1
> ;	bcc.s	nxrok\@
> ;	moveq	#0,\1
> ;nxrok\@:
> ;		ENDM
> ;
330,331c421,422
< 	move.B	s_DitherThresh(a6),d1					;random ditherness
< 	moveq.l	#0,d1							;DitherRemove test only
---
> 	move.B	s_DitherThresh(a6),d1	;random ditherness
> 
337,338c428,429
< 1$	asr.w	#2,d0
< 	;no need;move.b	d0,(a6)						;red
---
> 1$	asr.w	#4,d0
> 	;no need;move.b	d0,(a6)	;red
341c432
< 	move.b	1(a6),d0						;green
---
> 	move.b	1(a6),d0	;green
345,346c436,437
< 2$	asr.w	#2,d0
< 	;no need;move.b	d0,1(a6)					;green
---
> 2$	asr.w	#4,d0
> 	;no need;move.b	d0,1(a6)	;green
349c440
< 	move.b	2(a6),d0						;blue
---
> 	move.b	2(a6),d0	;blue
353,354c444,445
< 3$	asr.w	#2,d0
< 	;no need;move.b	d0,2(a6)					;blue
---
> 3$	asr.w	#4,d0
> 	;no need;move.b	d0,2(a6)	;blue
357c448,450
< 	jsr	(A4)							;Determine Routine
---
> 
> 
> 	jsr	(A4)			;Determine Routine
359,361c452,454
< 	move.b  D0,s_LastPlot(a6)					;determ'd result, what we're gonna plot
< 	lea	s_SIZEOF(a6),a6						;next pixel record
< 	;subq.w	#1,(sp)							;line_x_(BP)
---
> 	move.b  D0,s_LastPlot(a6)	;determ'd result, what we're gonna plot
> 	lea	s_SIZEOF(a6),a6		;next pixel record
> 	;subq.w	#1,(sp)			;line_x_(BP)
364a458
> 
368,371c462,465
< 	movem.w	(a0),d0/d1						;bytes per row, row#
< 	sub.w	(sp),d1							;d1=this row# (screen reference)
< 	mulu	d0,d1							;d1=offset to current line on scr'
< 	asl.w	#3,d0							;bytes *8 --> pixels
---
> 	movem.w	(a0),d0/d1		;bytes per row, row#
> 	sub.w	(sp),d1			;d1=this row# (screen reference)
> 	mulu	d0,d1			;d1=offset to current line on scr'
> 	asl.w	#3,d0			;bytes *8 --> pixels
377c471
< 	add.w	#1,2(sp)						;line#, current
---
> 	add.w	#1,2(sp)	;line#, current
380,381c474,475
< 	addq	#2,sp							;clup loop counter, #lines,stack
< 	addq	#2,sp							;clup line#
---
> 	addq	#2,sp	;clup loop counter, #lines,stack
> 	addq	#2,sp	;clup line#
384d477
< 	DUMPMSG	<done_wholeham>	
386,390c479,490
< 	st	FlagToolWindow_(BP)					;TOOLS displayed	;SEP131990
< 	st	FlagFrbx_(BP)						;ask for screen arrange	;SEP131990
< 	xjsr	ReallySaveUnDo						;memories.asm, saves ham undo buffer SEP201990
< 	xjsr	SaveUnDoRGB						;rgbrtns.asm saves rgb undo buffer (to match ham) SEP011990
< 	xjsr	AproPointer						;no need to reset point if didn't set it...
---
> 
> 	st	FlagToolWindow_(BP)	;TOOLS displayed	;SEP131990
> 	st	FlagFrbx_(BP)		;ask for screen arrange	;SEP131990
> 
> 	;SEP201990;xjsr	SaveUnDo	;memories.asm, saves ham undo buffer SEP011990
> 	xjsr	ReallySaveUnDo	;memories.asm, saves ham undo buffer SEP201990
> 	xjsr	SaveUnDoRGB	;rgbrtns.asm   saves rgb undo buffer (to match ham) SEP011990
> 
> ;SEP011990...label moved...;end_wholeham:
> 
> 	xjsr	AproPointer	;no need to reset point if didn't set it...
> 
392c492,493
< 	rts								;wholeham
---
> 
> 	RTS	;wholeham
395c496
< 	;;addq	#2,sp							;clup stack
---
> 	;;addq	#2,sp	;clup stack
398,399c499,500
< 	st	FlagToolWindow_(BP)					;TOOLS displayed	;SEP131990
< 	st	FlagFrbx_(BP)						;ask for screen arrange	;SEP131990
---
> 	st	FlagToolWindow_(BP)	;TOOLS displayed	;SEP131990
> 	st	FlagFrbx_(BP)		;ask for screen arrange	;SEP131990
401,404c502,507
< 	sf	FlagWholeHam_(BP)					;SEP131990
< 	addq	#2,sp							;clup loop counter, #lines,stack
< 	addq	#2,sp							;clup line#
< 	rts								;wholeham
---
> 	sf	FlagWholeHam_(BP)	;SEP131990
> 	addq	#2,sp	;clup loop counter, #lines,stack
> 	addq	#2,sp	;clup line#
> 	RTS	;wholeham
> 
> ;-------------------
406c509,579
< 	END 
---
>    END 
> 
> ;------------------- dead code
> 
> 
> 	lea	PictureInfo_(BP),a0	;...grab #row from file's bmhd
> 	move.l	PI_BMHEADER(a0),a0
> 	move.w	bm_Rows(a0),-(sp)	;using STACK for line counter
> 	clr.w	-(sp)
> eachrowloop:
> 		;LOAD ONE LINE FROM FILE
> 	moveq	#0,d0
> 	move.w	(sp),d0			;line#
> 	lea	BigPicRGB_(BP),a0	;picture struct
> 	lea	PictureInfo_(BP),a1	;pictureinfo struct
> 	xref LoadRGBLineADR		;RELOCATABLE, YECH!
> 	move.l	LoadRGBLineADR,a2
> 	jsr	(a2)
> 
> 		;FLAG LINE TO BE RENDERED, THEN DISPLAY HAM PREVIEW
> 	xref	SolLineTable_
> 		moveq	#0,d0
> 		move.w	(sp),d0		;arg=line#
> 		tst.l	SolLineTable_(BP)	;DEC0391
> 		beq.s	allnosolflag
> 		move.l	SolLineTable_(BP),a0
> 		sf	0(a0,d0.w)	;flag line with new rgb info
> allnosolflag:
> 		bsr	DisplayPreview
> 
> 		;CHECK FOR CANCEL
> 		xjsr	ScrollAndCheckCancel	;canceler.asm
> 		bne.s	donerowloop
> 
> 	addq	#1,(sp)
> 	move.w	(sp),d0
> 	cmp.w	2(sp),d0
> 	bcs	eachrowloop	; 'main loop'
> donerowloop:
> 	addq.l	#4,sp		;remove loop counter, max iter count
> 
> 
> ;-----
> 
> 
> 
> 
> 
> DisplayPreview:	;d0=line#
> 	movem.l	d0-d7/a0-a6,-(sp)
> 
> 		;GET RGB DATA INTO SAVEARRAY
> 
> 		;DETERMINE WHAT TO PLOT IN HAM
> 
> 		;ACTUALLY PLOT ON HAM/PREVIEW SCREEN
> 	xref	BigPicWt_
> 	move.l	BigPicWt_(BP),d0	;d0=#pixels
> 	lea	BigPicRGB_(BP),a0	;'picture' struct
> 	move.l	(sp),d1			;line#
> 	mulu	(a0),d1			;offset=bytes-per-row * line#
> 	xjsr	LinePlot_SaveArray	;lineplot.asm
> 		;    plots a ham line given:
> 		;     d0.l = number of pixels ( this is # of PIXELS, will be /32 for words)
> 		;     d1.w = plane offset start of line
> 		;     a6.l = ptr to "d0" number of bytes...indicate what to plot per pixel
> 		;     * destroys most registers
> 
> 
> 	movem.l	(sp)+,d0-d7/a0-a6
> 	RTS	;DisplayPreview
